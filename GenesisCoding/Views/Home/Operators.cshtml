@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>C# Operators</h2>

<p>
    An operator is a symbol that tells the compiler to perform specific mathematical<br/>
    or logical manipulations. C# has rich set of built-in operators and provides the<br/>
    following type of operators:
</p>

<ul class="list-group">
    <li class="list-group-item">Boolean Conditions</li>
    <li class="list-group-item">Automatic Garbage Collection</li>
    <li class="list-group-item">Standard Library</li>
</ul>

<h2>Arithmetic Operators</h2>

<p>Following table shows all the arithmetic operators supported by C#. Assume variable A holds 10 and variable B holds 20 then:</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>+</td>
            <td>Adds two operands</td>
            <td>A + B = 30</td>
        </tr>
        <tr>
            <td>-</td>
            <td>Subtracts second operand from the first</td>
            <td>A - B = -10</td>
        </tr>
        <tr>
            <td>*</td>
            <td>Multiplies both operands</td>
            <td>A * B = 200</td>
        </tr>
        <tr>
            <td>/</td>
            <td>Divides numerator by de-numerator</td>
            <td>B / A = 2</td>
        </tr>
        <tr>
            <td>%</td>
            <td>Modulus Operator and remainder of after an integer division</td>
            <td>B % A = 0</td>
        </tr>
        <tr>
            <td>++</td>
            <td>Increment operator increases integer value by one</td>
            <td>A++ = 11</td>
        </tr>
        <tr>
            <td>--</td>
            <td>Decrement operator decreases integer value by one</td>
            <td>A-- = 9</td>
        </tr>
    </tbody>
</table>

<h2>Relational Operators</h2>

<p>Following table shows all the relational operators supported by C#. Assume variable A holds 10 and variable B holds 20, then:</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>==</td>
            <td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>
            <td>(A == B) is not true.</td>
        </tr>
        <tr>
            <td>!=</td>
            <td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>
            <td>(A != B) is true.</td>
        </tr>
        <tr>
            <td>></td>
            <td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>
            <td>(A > B) is not true. </td>
        </tr>
        <tr>
            <td><</td>
            <td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>
            <td>(A < B) is true.</td>
        </tr>
        <tr>
            <td>>=</td>
            <td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>
            <td>(A >= B) is not true.</td>
        </tr>
        <tr>
            <td><=</td>
            <td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>
            <td>(A <= B) is true.</td>
        </tr>
    </tbody>
</table>

<h2>Logical Operators</h2>

<p>Following table shows all the logical operators supported by C#. Assume variable A holds Boolean value true and variable B holds Boolean value false, then:</p>


<table class="table table-striped">
    <thead>
        <tr>
            <th>Operator</th>
            <th>Description</th>
            <th>Example</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>&&</td>
            <td>Called Logical AND operator. If both the operands are non zero then condition becomes true.</td>
            <td>(A && B) is false.</td>
        </tr>
        <tr>
            <td>||</td>
            <td>Called Logical OR Operator. If any of the two operands is non zero then condition becomes true.</td>
            <td>(A || B) is true.</td>
        </tr>
        <tr>
            <td>!</td>
            <td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td>
            <td>!(A && B) is true. </td>
        </tr>
    </tbody>
</table>

<p><a href="/Home/Variables">Previous Page&nbsp;&nbsp;&nbsp;</a><a href="/Home/DescisionMaking">Next Page</a></p>